!function(a) {
    "use strict";
    a(document).ready(function() {
        var b = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.whitespace,
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            remote: {
                url: "searchCardsAjax?query=title:%QUERY",
                wildcard: "%QUERY"
            }
        });
        a(".typeahead").on("typeahead:selected", function() {
            a("input#query").val("title:" + a("input#searchQuery").val());
            a("#searchForm").submit();
        }).typeahead(null, {
            name: "cards",
            display: "title",
            source: b,
            limit: 6,
            templates: {
                suggestion: Handlebars.compile('<div class="row typeahead-row"><div class="col-md-2 col-sm-3"><img src="/deals/resources/upload/card/{{imagePath}}">' + '</div><div class="col-md-10 col-sm-9"><div class="row"><strong>{{title}}</strong></div><div class="row">{{description}}</div></div></div>')
            }
        });
        a("#searchForm").submit(function() {
            if (a("input#searchQuery").val()) a("input#query").val("title:" + a("input#searchQuery").val());
        });
        a("#registrationForm, #editProfileForm, #newUserForm").bootstrapValidator({
            feedbackIcons: {
                valid: "glyphicon glyphicon-ok",
                invalid: "glyphicon glyphicon-remove",
                validating: "glyphicon glyphicon-refresh"
            },
            fields: {
                firstName: {
                    validators: {
                        stringLength: {
                            min: 2
                        },
                        notEmpty: {
                            message: "Please enter first name"
                        }
                    }
                },
                lastName: {
                    validators: {
                        stringLength: {
                            min: 2
                        },
                        notEmpty: {
                            message: "Please enter last name"
                        }
                    }
                },
                email: {
                    validators: {
                        notEmpty: {
                            message: "Please enter email address"
                        },
                        emailAddress: {
                            message: "Please supply a valid email address"
                        }
                    }
                },
                password: {
                    validators: {
                        notEmpty: {
                            message: "Please enter password"
                        },
                        stringLength: {
                            min: 4,
                            message: "Password should be atleast 4 digits"
                        }
                    }
                },
                mobile: {
                    validators: {
                        notEmpty: {
                            message: "Please enter phone number"
                        },
                        phone: {
                            country: "US",
                            message: "Please supply a vaild phone number with area code"
                        }
                    }
                }
            }
        }).on("submit", function(a) {});
        a("#forgotPasswordForm").bootstrapValidator({
            feedbackIcons: {
                valid: "glyphicon glyphicon-ok",
                invalid: "glyphicon glyphicon-remove",
                validating: "glyphicon glyphicon-refresh"
            },
            fields: {
                email: {
                    validators: {
                        notEmpty: {
                            message: "Please enter email address"
                        },
                        emailAddress: {
                            message: "Please supply a valid email address"
                        }
                    }
                }
            }
        }).on("submit", function(a) {});
        a("#resetPasswordForm").bootstrapValidator({
            feedbackIcons: {
                valid: "glyphicon glyphicon-ok",
                invalid: "glyphicon glyphicon-remove",
                validating: "glyphicon glyphicon-refresh"
            },
            fields: {
                newPassword: {
                    validators: {
                        notEmpty: {
                            message: "Please supply the password"
                        },
                        stringLength: {
                            min: 4,
                            message: "Password should be atleast 4 digits"
                        }
                    }
                },
                matchPassword: {
                    validators: {
                        notEmpty: {
                            message: "Please re-enter password"
                        },
                        stringLength: {
                            min: 4,
                            message: "Password should be atleast 4 digits"
                        }
                    }
                }
            }
        }).on("submit", function(a) {});
        a("#loginform").bootstrapValidator({
            feedbackIcons: {
                valid: "glyphicon glyphicon-ok",
                invalid: "glyphicon glyphicon-remove",
                validating: "glyphicon glyphicon-refresh"
            },
            fields: {
                email: {
                    validators: {
                        notEmpty: {
                            message: "Please enter email address"
                        }
                    }
                },
                password: {
                    validators: {
                        notEmpty: {
                            message: "Please enter password"
                        }
                    }
                }
            }
        }).on("submit", function(a) {});
        a("#bankForm").bootstrapValidator({
            fields: {
                name: {
                    validators: {
                        notEmpty: {
                            message: "Please enter bank name"
                        }
                    }
                }
            }
        }).on("submit", function(a) {
            alert("asd");
        });
        NProgress.configure({
            showSpinner: false
        });
        NProgress.start();
        NProgress.set(.4);
        var c = setInterval(function() {
            NProgress.inc();
        }, 1e3);
        NProgress.done();
        clearInterval(c);
        a("#paginate").paginate({
            limit: 10,
            initialPage: 0,
            navigationWrapper: a("#navigation"),
            navigationClass: "pagination pull-right"
        });
    });
    a(document).on("click", "#close-preview", function() {
        a(".image-preview").popover("hide");
        a(".image-preview").hover(function() {
            a(".image-preview").popover("show");
        }, function() {
            a(".image-preview").popover("hide");
        });
    });
    a(function() {
        var b = a("<button/>", {
            type: "button",
            text: "x",
            id: "close-preview",
            style: "font-size: initial;"
        });
        b.attr("class", "close pull-right");
        a(".image-preview").popover({
            trigger: "manual",
            html: true,
            title: "<strong>Preview</strong>" + a(b)[0].outerHTML,
            content: "There's no image",
            placement: "bottom"
        });
        a(".image-preview-clear").click(function() {
            a(".image-preview").attr("data-content", "").popover("hide");
            a(".image-preview-filename").val("");
            a(".image-preview-clear").hide();
            a(".image-preview-input input:file").val("");
            a(".image-preview-input-title").text("Browse");
        });
        a(".image-preview-input input:file").change(function() {
            var b = a("<img/>", {
                id: "dynamic",
                width: 250,
                height: 200
            });
            var c = this.files[0];
            var d = new FileReader();
            d.onload = function(d) {
                a(".image-preview-input-title").text("Change");
                a(".image-preview-clear").show();
                a(".image-preview-filename").val(c.name);
                b.attr("src", d.target.result);
                a(".image-preview").attr("data-content", a(b)[0].outerHTML).popover("show");
            };
            d.readAsDataURL(c);
        });
    });
    a(function() {
        if (null != a("#module")) {
            a("#" + a("#module").val()).addClass("in");
            a("#li-" + a("#module").val()).addClass("active");
            a("#" + a("#pageName").val()).show();
            a("#" + a("#pageName").val()).addClass("active");
        }
    });
    function b(b) {
        a(b.target).prev(".panel-heading").find(".more-less").toggleClass("glyphicon-plus glyphicon-minus");
    }
    a(".panel-group").on("hidden.bs.collapse", b);
    a(".panel-group").on("shown.bs.collapse", b);
    var c = "searchCardsAjax?query=";
    var d = function(a, b) {
        if (c.indexOf(a + ":") !== -1) {
            var d = c.indexOf(a + ":");
            d = d + 1 + a.length;
            c = [ c.slice(0, d), b + ",", c.slice(d) ].join("");
        } else if (c.match("query=$")) c = c + a + ":" + b; else c = c + "::" + a + ":" + b;
        return c;
    };
    var e = function(b, c, d) {
        var e = angular.element(a("#controller")).scope();
        e.filterLabels.push({
            name: d,
            id: c,
            value: b
        });
    };
    var f = function(b, c) {
        var d = angular.element(a("#controller")).scope();
        for (var e = 0; e < d.filterLabels.length; e++) if (d.filterLabels[e].id == b) {
            d.filterLabels.splice(e, 1);
            break;
        }
        a("#" + c + b + "-check").attr("checked", false);
    };
    var g = function(a, b) {
        if (c.indexOf(a + ":") !== -1) {
            var d = c.indexOf(a + ":");
            var e = c.slice(0, d);
            var f = c.slice(d);
            if (f.indexOf("::") !== -1) {
                var g = f.indexOf("::");
                var i = f.slice(g);
                f = f.slice(0, g);
                if (f.indexOf(",") == -1) {
                    f = "";
                    if (e.match("::" + "$")) e = e.slice(0, -2); else if (i.match("^" + "::")) i = i.slice(2);
                } else if (f.match(b + "$")) f = f.replace("," + b, ""); else f = f.replace(b + ",", "");
                c = [ e, f, i ].join("");
            } else c = h(f, e, b);
        }
        return c;
    };
    var h = function(a, b, d) {
        if (a.indexOf(",") == -1) if (b.match("::" + "$")) c = b.slice(0, -2); else c = b; else {
            if (a.match(d + "$")) a = a.replace("," + d, ""); else a = a.replace(d + ",", "");
            c = [ b, a ].join("");
        }
        return c;
    };
    angular.module("searchApp", []).controller("searchCtrl", [ "$scope", "$http", function(b, h) {
        b.bankFilters = a.parseJSON(a("#bankList").val());
        b.categoryFilters = a.parseJSON(a("#categoryList").val());
        b.cardCategoryFilters = a.parseJSON(a("#cardCategoryList").val());
        b.titleFilters = a.parseJSON(a("#titleArray").val());
        b.filterLabels = [];
        angular.forEach(b.bankFilters, function(a, c) {
            if (a.isChecked) b.filterLabels.push({
                name: a.displayName,
                id: a.id,
                value: a.name
            });
        });
        angular.forEach(b.categoryFilters, function(a, c) {
            if (a.isChecked) b.filterLabels.push({
                name: a.displayName,
                id: a.id,
                value: a.name
            });
        });
        angular.forEach(b.cardCategoryFilters, function(a, c) {
            if (a.isChecked) b.filterLabels.push({
                name: a.displayName,
                id: a.id,
                value: a.name
            });
        });
        angular.forEach(b.titleFilters, function(a, c) {
            b.filterLabels.push({
                name: a.displayName,
                id: a.id,
                value: a.name
            });
        });
        b.init = function(a) {
            if (null != a && "null" != a) c += a;
            h.get(c).then(function(a) {
                b.results = a.data;
            });
        };
        b.sortOptions = [ {
            name: "Sort By"
        }, {
            name: "Popularity"
        }, {
            name: "New"
        }, {
            name: "Bank"
        } ];
        b.filter = function(i, j, k, l) {
            a("#loader").show();
            if (l.target.checked) {
                c = d(i, j);
                h.get(c).then(function(d) {
                    a("#loader").hide();
                    b.results = d.data;
                    var f = c.replace("Ajax", "");
                    f = f.replace(/:/g, "%3A");
                    window.history.pushState("page", null, f);
                    e(i, j, k);
                });
            } else {
                c = g(i, j);
                h.get(c).then(function(d) {
                    a("#loader").hide();
                    b.results = d.data;
                    var e = c.replace("Ajax", "");
                    e = e.replace(/:/g, "%3A");
                    window.history.pushState("page", null, e);
                    f(j, i);
                });
            }
        };
        b.removeAll = function() {
            angular.forEach(b.filterLabels, function(b, d) {
                c = g(b.value, b.id);
                a("#" + b.value + b.id + "-check").attr("checked", false);
            });
            h.get(c).then(function(a) {
                b.results = a.data;
                var d = c.replace("Ajax", "");
                d = d.replace(/:/g, "%3A");
                window.history.pushState("page", null, d);
                b.filterLabels = [];
            });
        };
        b.sort = function() {
            if ("Bank" == b.item.name) if ("" == c) c += "?orderBy=bank.name&order=desc"; else c += "&orderBy=bank.name&order=desc"; else if ("New" == b.item.name) if ("" == c) c = c += "?orderBy=c.lastModifiedDate&order=desc"; else c = c += "&orderBy=c.lastModifiedDate&order=desc";
            h.get(c).then(function(a) {
                b.results = a.data;
                var d = c.replace("Ajax", "");
                d = d.replace(/:/g, "%3A");
                window.history.pushState("page", null, d);
                b.filterLabels = [];
            });
        };
    } ]);
}(jQuery);